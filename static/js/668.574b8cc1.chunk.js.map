{"version":3,"file":"static/js/668.574b8cc1.chunk.js","mappings":"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","sources":["utils/date.ts","pages/Contacts.tsx"],"sourcesContent":["export function formatDateToMMDDYYYY(input: string | Date | undefined | null): string {\n  if (!input) return '';\n  const d = typeof input === 'string' ? new Date(input) : input;\n  if (Number.isNaN(d.getTime())) return '';\n  const mm = String(d.getMonth() + 1).padStart(2, '0');\n  const dd = String(d.getDate()).padStart(2, '0');\n  const yyyy = String(d.getFullYear());\n  return `${mm}/${dd}/${yyyy}`;\n}\n","import React, { useEffect, useState } from 'react';\nimport { formatDateToMMDDYYYY } from '../utils/date';\nimport {\n  Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, Typography, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, MenuItem, Select, InputLabel, FormControl\n} from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddIcon from '@mui/icons-material/Add';\n\nimport { buildUrl, tryFetchWithFallback } from '../apiBase';\n\ninterface Contact {\n  contact_id: number;\n  contact_control: string;\n  display_name: string;\n  contact_type: string;\n  contact_info: string;\n  created_at: string;\n}\n\nconst CONTACT_TYPES = ['Customer', 'Vendor', 'Employee'];\n\nconst Contacts: React.FC = () => {\n  const [items, setItems] = useState<Contact[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [editId, setEditId] = useState<number | null>(null);\n    const [confirmOpen, setConfirmOpen] = useState(false);\n    const [confirmId, setConfirmId] = useState<number | null>(null);\n  const [form, setForm] = useState({ contact_control: '', display_name: '', contact_type: '', contact_info: '' });\n\n  const fetchContacts = async () => {\n    setLoading(true);\n    try {\n      const res = await tryFetchWithFallback('/api/contacts');\n      const data = await res.json();\n      setItems(Array.isArray(data) ? data : []);\n    } catch (e) {\n      console.error('fetch contacts failed', e);\n    } finally { setLoading(false); }\n  };\n\n  useEffect(() => { fetchContacts(); }, []);\n\n  const handleOpen = (it?: Contact) => {\n    // Blur any currently focused element to avoid aria-hidden warnings\n    const maybeBlurActiveElement = () => {\n      if (document.activeElement instanceof HTMLElement) document.activeElement.blur();\n    };\n    maybeBlurActiveElement();\n    if (it) {\n      setEditId(it.contact_id);\n      setForm({ contact_control: it.contact_control, display_name: it.display_name, contact_type: it.contact_type || '', contact_info: it.contact_info || '' });\n    } else {\n      setEditId(null);\n      setForm({ contact_control: '', display_name: '', contact_type: '', contact_info: '' });\n    }\n    setOpen(true);\n  };\n  const handleClose = () => { setOpen(false); setEditId(null); };\n\n  const handleSubmit = async () => {\n    try {\n      let res;\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('You must be logged in to perform this action.');\n        return;\n      }\n      const authHeader = { Authorization: `Bearer ${token}` };\n      if (editId) {\n        const payload: any = { display_name: form.display_name, contact_type: form.contact_type, contact_info: form.contact_info };\n        if (form.contact_control) payload.contact_control = form.contact_control;\n        res = await window.fetch(buildUrl(`/api/contacts/${editId}`), { method: 'PUT', headers: { 'Content-Type': 'application/json', ...authHeader }, body: JSON.stringify(payload) });\n      } else {\n        const payload = { display_name: form.display_name, contact_type: form.contact_type, contact_info: form.contact_info };\n        res = await window.fetch(buildUrl('/api/contacts'), { method: 'POST', headers: { 'Content-Type': 'application/json', ...authHeader }, body: JSON.stringify(payload) });\n      }\n      if (!res.ok) throw new Error('Save failed');\n      await fetchContacts();\n      handleClose();\n    } catch (e) {\n      alert('Save failed');\n    }\n  };\n\n  const handleDelete = async (id: number) => {\n    // Blur active element before opening confirm dialog to prevent aria-hidden focus issues\n    if (document.activeElement instanceof HTMLElement) document.activeElement.blur();\n    setConfirmId(id);\n    setConfirmOpen(true);\n  };\n\n  const confirmDelete = async () => {\n    if (!confirmId) return;\n    try {\n  await window.fetch(buildUrl(`/api/contacts/${confirmId}`), { method: 'DELETE', headers: { Authorization: `Bearer ${localStorage.getItem('token') || ''}` } });\n      setConfirmOpen(false);\n      setConfirmId(null);\n      await fetchContacts();\n    } catch (e) {\n      alert('Delete failed');\n    }\n  };\n\n  return (\n    <Box p={2}>\n      <Typography variant=\"h5\" gutterBottom>Contacts</Typography>\n      <Button variant=\"contained\" startIcon={<AddIcon />} onClick={() => handleOpen()} sx={{ mb: 2 }}>Add Contact</Button>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Contact Control #</TableCell>\n              <TableCell>Display Name</TableCell>\n              <TableCell>Type</TableCell>\n              <TableCell>Contact Info</TableCell>\n              <TableCell>Created At</TableCell>\n              <TableCell align=\"right\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {items.map(it => (\n              <TableRow key={it.contact_id}>\n                <TableCell>{it.contact_control}</TableCell>\n                <TableCell>{it.display_name}</TableCell>\n                <TableCell>{it.contact_type}</TableCell>\n                <TableCell>{it.contact_info}</TableCell>\n                <TableCell>{formatDateToMMDDYYYY(it.created_at)}</TableCell>\n                <TableCell align=\"right\">\n                  <IconButton onClick={() => handleOpen(it)}><EditIcon /></IconButton>\n                  <IconButton color=\"error\" onClick={() => handleDelete(it.contact_id)}><DeleteIcon /></IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n            {items.length === 0 && !loading && (\n              <TableRow><TableCell colSpan={6} align=\"center\">No contacts found.</TableCell></TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>{editId ? 'Edit Contact' : 'Add Contact'}</DialogTitle>\n        <DialogContent>\n          <TextField\n            margin=\"dense\"\n            label=\"Contact Control #\"\n            name=\"contact_control\"\n            value={form.contact_control}\n            onChange={(e) => setForm({...form, contact_control: e.target.value})}\n            fullWidth\n            disabled={!editId}\n            helperText={!editId ? 'Auto-generated' : ''}\n          />\n          <TextField autoFocus margin=\"dense\" label=\"Display Name\" name=\"display_name\" value={form.display_name} onChange={(e) => setForm({...form, display_name: e.target.value})} fullWidth />\n          <FormControl fullWidth margin=\"dense\">\n            <InputLabel id=\"contact-type-label\">Contact Type</InputLabel>\n            <Select labelId=\"contact-type-label\" name=\"contact_type\" value={form.contact_type} label=\"Contact Type\" onChange={(e:any) => setForm({...form, contact_type: e.target.value})}>\n              <MenuItem value=\"\"><em>None</em></MenuItem>\n              {CONTACT_TYPES.map(t => <MenuItem key={t} value={t}>{t}</MenuItem>)}\n            </Select>\n          </FormControl>\n          <TextField margin=\"dense\" label=\"Contact Info\" name=\"contact_info\" value={form.contact_info} onChange={(e) => setForm({...form, contact_info: e.target.value})} fullWidth multiline rows={3} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleSubmit} variant=\"contained\">{editId ? 'Update' : 'Add'}</Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog open={confirmOpen} onClose={() => setConfirmOpen(false)}>\n        <DialogTitle>Confirm Delete</DialogTitle>\n        <DialogContent>Are you sure you want to delete this contact?</DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={() => setConfirmOpen(false)}>Cancel</Button>\n          <Button color=\"error\" onClick={confirmDelete}>Delete</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["formatDateToMMDDYYYY","input","d","Date","Number","isNaN","getTime","mm","String","getMonth","padStart","dd","getDate","yyyy","getFullYear","concat","CONTACT_TYPES","Contacts","items","setItems","useState","loading","setLoading","open","setOpen","editId","setEditId","confirmOpen","setConfirmOpen","confirmId","setConfirmId","form","setForm","contact_control","display_name","contact_type","contact_info","fetchContacts","async","res","tryFetchWithFallback","data","json","Array","isArray","e","console","error","useEffect","handleOpen","it","document","activeElement","HTMLElement","blur","contact_id","handleClose","_jsxs","Box","p","children","_jsx","Typography","variant","gutterBottom","Button","startIcon","AddIcon","onClick","sx","mb","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","created_at","IconButton","EditIcon","color","id","handleDelete","DeleteIcon","length","colSpan","Dialog","onClose","DialogTitle","DialogContent","TextField","margin","label","name","value","onChange","_objectSpread","target","fullWidth","disabled","helperText","autoFocus","FormControl","InputLabel","Select","labelId","MenuItem","t","multiline","rows","DialogActions","token","localStorage","getItem","alert","authHeader","Authorization","payload","window","fetch","buildUrl","method","headers","body","JSON","stringify","ok","Error"],"sourceRoot":""}